# Autogenerated by nbdev

d = { 'settings': { 'branch': 'master',
                'doc_baseurl': '/cfnet/',
                'doc_host': 'https://birkhoffg.github.io',
                'git_url': 'https://github.com/birkhoffg/cfnet/tree/master/',
                'lib_path': 'relax'},
  'syms': { 'relax.data.loader': { 'relax.data.loader.BaseDataLoader': ('data.loader.html#basedataloader', 'relax/data/loader.py'),
                                   'relax.data.loader.BaseDataLoader.__init__': ( 'data.loader.html#basedataloader.__init__',
                                                                                  'relax/data/loader.py'),
                                   'relax.data.loader.BaseDataLoader.__iter__': ( 'data.loader.html#basedataloader.__iter__',
                                                                                  'relax/data/loader.py'),
                                   'relax.data.loader.BaseDataLoader.__len__': ( 'data.loader.html#basedataloader.__len__',
                                                                                 'relax/data/loader.py'),
                                   'relax.data.loader.BaseDataLoader.__next__': ( 'data.loader.html#basedataloader.__next__',
                                                                                  'relax/data/loader.py'),
                                   'relax.data.loader.DataLoader': ('data.loader.html#dataloader', 'relax/data/loader.py'),
                                   'relax.data.loader.DataLoader.__init__': ( 'data.loader.html#dataloader.__init__',
                                                                              'relax/data/loader.py'),
                                   'relax.data.loader.DataLoaderJax': ('data.loader.html#dataloaderjax', 'relax/data/loader.py'),
                                   'relax.data.loader.DataLoaderJax.__init__': ( 'data.loader.html#dataloaderjax.__init__',
                                                                                 'relax/data/loader.py'),
                                   'relax.data.loader.DataLoaderJax.__iter__': ( 'data.loader.html#dataloaderjax.__iter__',
                                                                                 'relax/data/loader.py'),
                                   'relax.data.loader.DataLoaderJax.__len__': ( 'data.loader.html#dataloaderjax.__len__',
                                                                                'relax/data/loader.py'),
                                   'relax.data.loader.DataLoaderJax.__next__': ( 'data.loader.html#dataloaderjax.__next__',
                                                                                 'relax/data/loader.py'),
                                   'relax.data.loader.DataLoaderPytorch': ('data.loader.html#dataloaderpytorch', 'relax/data/loader.py'),
                                   'relax.data.loader.DataLoaderPytorch.__init__': ( 'data.loader.html#dataloaderpytorch.__init__',
                                                                                     'relax/data/loader.py'),
                                   'relax.data.loader.DataLoaderPytorch.__iter__': ( 'data.loader.html#dataloaderpytorch.__iter__',
                                                                                     'relax/data/loader.py'),
                                   'relax.data.loader.DataLoaderPytorch.__len__': ( 'data.loader.html#dataloaderpytorch.__len__',
                                                                                    'relax/data/loader.py'),
                                   'relax.data.loader.DataLoaderPytorch.__next__': ( 'data.loader.html#dataloaderpytorch.__next__',
                                                                                     'relax/data/loader.py'),
                                   'relax.data.loader.Dataset': ('data.loader.html#dataset', 'relax/data/loader.py'),
                                   'relax.data.loader.Dataset.__getitem__': ( 'data.loader.html#dataset.__getitem__',
                                                                              'relax/data/loader.py'),
                                   'relax.data.loader.Dataset.__init__': ('data.loader.html#dataset.__init__', 'relax/data/loader.py'),
                                   'relax.data.loader.Dataset.__len__': ('data.loader.html#dataset.__len__', 'relax/data/loader.py'),
                                   'relax.data.loader._convert_dataset_pytorch': ( 'data.loader.html#_convert_dataset_pytorch',
                                                                                   'relax/data/loader.py'),
                                   'relax.data.loader._dispatch_dataloader': ( 'data.loader.html#_dispatch_dataloader',
                                                                               'relax/data/loader.py'),
                                   'relax.data.loader._numpy_collate': ('data.loader.html#_numpy_collate', 'relax/data/loader.py'),
                                   'relax.data.loader._supported_backends': ( 'data.loader.html#_supported_backends',
                                                                              'relax/data/loader.py')},
            'relax.data.module': { 'relax.data.module.BaseDataModule': ('data.module.html#basedatamodule', 'relax/data/module.py'),
                                   'relax.data.module.BaseDataModule.apply_constraints': ( 'data.module.html#basedatamodule.apply_constraints',
                                                                                           'relax/data/module.py'),
                                   'relax.data.module.BaseDataModule.apply_regularization': ( 'data.module.html#basedatamodule.apply_regularization',
                                                                                              'relax/data/module.py'),
                                   'relax.data.module.BaseDataModule.data': ( 'data.module.html#basedatamodule.data',
                                                                              'relax/data/module.py'),
                                   'relax.data.module.BaseDataModule.data_name': ( 'data.module.html#basedatamodule.data_name',
                                                                                   'relax/data/module.py'),
                                   'relax.data.module.BaseDataModule.inverse_transform': ( 'data.module.html#basedatamodule.inverse_transform',
                                                                                           'relax/data/module.py'),
                                   'relax.data.module.BaseDataModule.prepare_data': ( 'data.module.html#basedatamodule.prepare_data',
                                                                                      'relax/data/module.py'),
                                   'relax.data.module.BaseDataModule.test_dataloader': ( 'data.module.html#basedatamodule.test_dataloader',
                                                                                         'relax/data/module.py'),
                                   'relax.data.module.BaseDataModule.test_dataset': ( 'data.module.html#basedatamodule.test_dataset',
                                                                                      'relax/data/module.py'),
                                   'relax.data.module.BaseDataModule.train_dataloader': ( 'data.module.html#basedatamodule.train_dataloader',
                                                                                          'relax/data/module.py'),
                                   'relax.data.module.BaseDataModule.train_dataset': ( 'data.module.html#basedatamodule.train_dataset',
                                                                                       'relax/data/module.py'),
                                   'relax.data.module.BaseDataModule.transform': ( 'data.module.html#basedatamodule.transform',
                                                                                   'relax/data/module.py'),
                                   'relax.data.module.BaseDataModule.val_dataloader': ( 'data.module.html#basedatamodule.val_dataloader',
                                                                                        'relax/data/module.py'),
                                   'relax.data.module.BaseDataModule.val_dataset': ( 'data.module.html#basedatamodule.val_dataset',
                                                                                     'relax/data/module.py'),
                                   'relax.data.module.TabularDataModule': ('data.module.html#tabulardatamodule', 'relax/data/module.py'),
                                   'relax.data.module.TabularDataModule.__init__': ( 'data.module.html#tabulardatamodule.__init__',
                                                                                     'relax/data/module.py'),
                                   'relax.data.module.TabularDataModule.apply_constraints': ( 'data.module.html#tabulardatamodule.apply_constraints',
                                                                                              'relax/data/module.py'),
                                   'relax.data.module.TabularDataModule.apply_regularization': ( 'data.module.html#tabulardatamodule.apply_regularization',
                                                                                                 'relax/data/module.py'),
                                   'relax.data.module.TabularDataModule.data': ( 'data.module.html#tabulardatamodule.data',
                                                                                 'relax/data/module.py'),
                                   'relax.data.module.TabularDataModule.data_name': ( 'data.module.html#tabulardatamodule.data_name',
                                                                                      'relax/data/module.py'),
                                   'relax.data.module.TabularDataModule.inverse_transform': ( 'data.module.html#tabulardatamodule.inverse_transform',
                                                                                              'relax/data/module.py'),
                                   'relax.data.module.TabularDataModule.prepare_data': ( 'data.module.html#tabulardatamodule.prepare_data',
                                                                                         'relax/data/module.py'),
                                   'relax.data.module.TabularDataModule.test_dataloader': ( 'data.module.html#tabulardatamodule.test_dataloader',
                                                                                            'relax/data/module.py'),
                                   'relax.data.module.TabularDataModule.test_dataset': ( 'data.module.html#tabulardatamodule.test_dataset',
                                                                                         'relax/data/module.py'),
                                   'relax.data.module.TabularDataModule.train_dataloader': ( 'data.module.html#tabulardatamodule.train_dataloader',
                                                                                             'relax/data/module.py'),
                                   'relax.data.module.TabularDataModule.train_dataset': ( 'data.module.html#tabulardatamodule.train_dataset',
                                                                                          'relax/data/module.py'),
                                   'relax.data.module.TabularDataModule.transform': ( 'data.module.html#tabulardatamodule.transform',
                                                                                      'relax/data/module.py'),
                                   'relax.data.module.TabularDataModule.val_dataloader': ( 'data.module.html#tabulardatamodule.val_dataloader',
                                                                                           'relax/data/module.py'),
                                   'relax.data.module.TabularDataModule.val_dataset': ( 'data.module.html#tabulardatamodule.val_dataset',
                                                                                        'relax/data/module.py'),
                                   'relax.data.module.TabularDataModuleConfigs': ( 'data.module.html#tabulardatamoduleconfigs',
                                                                                   'relax/data/module.py'),
                                   'relax.data.module._check_cols': ('data.module.html#_check_cols', 'relax/data/module.py'),
                                   'relax.data.module._init_scalar_encoder': ( 'data.module.html#_init_scalar_encoder',
                                                                               'relax/data/module.py'),
                                   'relax.data.module._inverse_transform_np': ( 'data.module.html#_inverse_transform_np',
                                                                                'relax/data/module.py'),
                                   'relax.data.module._process_data': ('data.module.html#_process_data', 'relax/data/module.py'),
                                   'relax.data.module._transform_df': ('data.module.html#_transform_df', 'relax/data/module.py'),
                                   'relax.data.module._validate_dataname': ('data.module.html#_validate_dataname', 'relax/data/module.py'),
                                   'relax.data.module.find_imutable_idx_list': ( 'data.module.html#find_imutable_idx_list',
                                                                                 'relax/data/module.py'),
                                   'relax.data.module.load_data': ('data.module.html#load_data', 'relax/data/module.py'),
                                   'relax.data.module.sample': ('data.module.html#sample', 'relax/data/module.py')},
            'relax.evaluate': { 'relax.evaluate.BaseEvalMetrics': ('evaluate.html#baseevalmetrics', 'relax/evaluate.py'),
                                'relax.evaluate.BaseEvalMetrics.__call__': ('evaluate.html#baseevalmetrics.__call__', 'relax/evaluate.py'),
                                'relax.evaluate.Explanation': ('evaluate.html#explanation', 'relax/evaluate.py'),
                                'relax.evaluate.Explanation.__post_init__': ( 'evaluate.html#explanation.__post_init__',
                                                                              'relax/evaluate.py'),
                                'relax.evaluate.ManifoldDist': ('evaluate.html#manifolddist', 'relax/evaluate.py'),
                                'relax.evaluate.ManifoldDist.__call__': ('evaluate.html#manifolddist.__call__', 'relax/evaluate.py'),
                                'relax.evaluate.ManifoldDist.__init__': ('evaluate.html#manifolddist.__init__', 'relax/evaluate.py'),
                                'relax.evaluate.PredictiveAccuracy': ('evaluate.html#predictiveaccuracy', 'relax/evaluate.py'),
                                'relax.evaluate.PredictiveAccuracy.__call__': ( 'evaluate.html#predictiveaccuracy.__call__',
                                                                                'relax/evaluate.py'),
                                'relax.evaluate.Proximity': ('evaluate.html#proximity', 'relax/evaluate.py'),
                                'relax.evaluate.Proximity.__call__': ('evaluate.html#proximity.__call__', 'relax/evaluate.py'),
                                'relax.evaluate.Runtime': ('evaluate.html#runtime', 'relax/evaluate.py'),
                                'relax.evaluate.Runtime.__call__': ('evaluate.html#runtime.__call__', 'relax/evaluate.py'),
                                'relax.evaluate.Sparsity': ('evaluate.html#sparsity', 'relax/evaluate.py'),
                                'relax.evaluate.Sparsity.__call__': ('evaluate.html#sparsity.__call__', 'relax/evaluate.py'),
                                'relax.evaluate.Validity': ('evaluate.html#validity', 'relax/evaluate.py'),
                                'relax.evaluate.Validity.__call__': ('evaluate.html#validity.__call__', 'relax/evaluate.py'),
                                'relax.evaluate._AuxPredFn': ('evaluate.html#_auxpredfn', 'relax/evaluate.py'),
                                'relax.evaluate._AuxPredFn.__call__': ('evaluate.html#_auxpredfn.__call__', 'relax/evaluate.py'),
                                'relax.evaluate._AuxPredFn.__init__': ('evaluate.html#_auxpredfn.__init__', 'relax/evaluate.py'),
                                'relax.evaluate._check_aux_pred_fn_args': ('evaluate.html#_check_aux_pred_fn_args', 'relax/evaluate.py'),
                                'relax.evaluate._check_pred_fn': ('evaluate.html#_check_pred_fn', 'relax/evaluate.py'),
                                'relax.evaluate._compute_acc': ('evaluate.html#_compute_acc', 'relax/evaluate.py'),
                                'relax.evaluate._compute_manifold_dist': ('evaluate.html#_compute_manifold_dist', 'relax/evaluate.py'),
                                'relax.evaluate._compute_spar': ('evaluate.html#_compute_spar', 'relax/evaluate.py'),
                                'relax.evaluate._compute_val': ('evaluate.html#_compute_val', 'relax/evaluate.py'),
                                'relax.evaluate._create_second_order_cfs': ('evaluate.html#_create_second_order_cfs', 'relax/evaluate.py'),
                                'relax.evaluate._get_metric': ('evaluate.html#_get_metric', 'relax/evaluate.py'),
                                'relax.evaluate._prepare_module': ('evaluate.html#_prepare_module', 'relax/evaluate.py'),
                                'relax.evaluate._train_parametric_module': ('evaluate.html#_train_parametric_module', 'relax/evaluate.py'),
                                'relax.evaluate._validate_configs': ('evaluate.html#_validate_configs', 'relax/evaluate.py'),
                                'relax.evaluate.benchmark_cfs': ('evaluate.html#benchmark_cfs', 'relax/evaluate.py'),
                                'relax.evaluate.compute_so_proximity': ('evaluate.html#compute_so_proximity', 'relax/evaluate.py'),
                                'relax.evaluate.compute_so_sparsity': ('evaluate.html#compute_so_sparsity', 'relax/evaluate.py'),
                                'relax.evaluate.compute_so_validity': ('evaluate.html#compute_so_validity', 'relax/evaluate.py'),
                                'relax.evaluate.evaluate_cfs': ('evaluate.html#evaluate_cfs', 'relax/evaluate.py'),
                                'relax.evaluate.generate_cf_explanations': ('evaluate.html#generate_cf_explanations', 'relax/evaluate.py'),
                                'relax.evaluate.generate_cf_results_local_exp': ( 'evaluate.html#generate_cf_results_local_exp',
                                                                                  'relax/evaluate.py'),
                                'relax.evaluate.generate_cf_results_relax': ( 'evaluate.html#generate_cf_results_relax',
                                                                              'relax/evaluate.py')},
            'relax.import_essentials': {},
            'relax.logger': { 'relax.logger.TensorboardLogger': ('logger.html#tensorboardlogger', 'relax/logger.py'),
                              'relax.logger.TensorboardLogger.__init__': ('logger.html#tensorboardlogger.__init__', 'relax/logger.py'),
                              'relax.logger.TensorboardLogger.close': ('logger.html#tensorboardlogger.close', 'relax/logger.py'),
                              'relax.logger.TensorboardLogger.get_last_logs': ( 'logger.html#tensorboardlogger.get_last_logs',
                                                                                'relax/logger.py'),
                              'relax.logger.TensorboardLogger.log': ('logger.html#tensorboardlogger.log', 'relax/logger.py'),
                              'relax.logger.TensorboardLogger.log_dict': ('logger.html#tensorboardlogger.log_dict', 'relax/logger.py'),
                              'relax.logger.TensorboardLogger.log_dir': ('logger.html#tensorboardlogger.log_dir', 'relax/logger.py'),
                              'relax.logger.TensorboardLogger.on_epoch_finished': ( 'logger.html#tensorboardlogger.on_epoch_finished',
                                                                                    'relax/logger.py'),
                              'relax.logger.TensorboardLogger.on_epoch_started': ( 'logger.html#tensorboardlogger.on_epoch_started',
                                                                                   'relax/logger.py'),
                              'relax.logger.TensorboardLogger.save_hyperparams': ( 'logger.html#tensorboardlogger.save_hyperparams',
                                                                                   'relax/logger.py')},
            'relax.methods.base': { 'relax.methods.base.BaseCFModule': ('methods.base.html#basecfmodule', 'relax/methods/base.py'),
                                    'relax.methods.base.BaseCFModule.data_module': ( 'methods.base.html#basecfmodule.data_module',
                                                                                     'relax/methods/base.py'),
                                    'relax.methods.base.BaseCFModule.generate_cfs': ( 'methods.base.html#basecfmodule.generate_cfs',
                                                                                      'relax/methods/base.py'),
                                    'relax.methods.base.BaseCFModule.hook_data_module': ( 'methods.base.html#basecfmodule.hook_data_module',
                                                                                          'relax/methods/base.py'),
                                    'relax.methods.base.BaseCFModule.name': ( 'methods.base.html#basecfmodule.name',
                                                                              'relax/methods/base.py'),
                                    'relax.methods.base.BaseCFModule.update_cat_info': ( 'methods.base.html#basecfmodule.update_cat_info',
                                                                                         'relax/methods/base.py'),
                                    'relax.methods.base.BaseParametricCFModule': ( 'methods.base.html#baseparametriccfmodule',
                                                                                   'relax/methods/base.py'),
                                    'relax.methods.base.BaseParametricCFModule._is_module_trained': ( 'methods.base.html#baseparametriccfmodule._is_module_trained',
                                                                                                      'relax/methods/base.py'),
                                    'relax.methods.base.BaseParametricCFModule.train': ( 'methods.base.html#baseparametriccfmodule.train',
                                                                                         'relax/methods/base.py'),
                                    'relax.methods.base.BasePredFnCFModule': ( 'methods.base.html#basepredfncfmodule',
                                                                               'relax/methods/base.py'),
                                    'relax.methods.base.BasePredFnCFModule.pred_fn': ( 'methods.base.html#basepredfncfmodule.pred_fn',
                                                                                       'relax/methods/base.py')},
            'relax.methods.counternet': { 'relax.methods.counternet.CounterNet': ( 'methods.counternet.html#counternet',
                                                                                   'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNet.__init__': ( 'methods.counternet.html#counternet.__init__',
                                                                                            'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNet._is_module_trained': ( 'methods.counternet.html#counternet._is_module_trained',
                                                                                                      'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNet.generate_cfs': ( 'methods.counternet.html#counternet.generate_cfs',
                                                                                                'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNet.pred_fn': ( 'methods.counternet.html#counternet.pred_fn',
                                                                                           'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNet.train': ( 'methods.counternet.html#counternet.train',
                                                                                         'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetConfigs': ( 'methods.counternet.html#counternetconfigs',
                                                                                          'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetModel': ( 'methods.counternet.html#counternetmodel',
                                                                                        'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetModel.__call__': ( 'methods.counternet.html#counternetmodel.__call__',
                                                                                                 'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetModel.__init__': ( 'methods.counternet.html#counternetmodel.__init__',
                                                                                                 'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetModelConfigs': ( 'methods.counternet.html#counternetmodelconfigs',
                                                                                               'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule': ( 'methods.counternet.html#counternettrainingmodule',
                                                                                                 'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule.__init__': ( 'methods.counternet.html#counternettrainingmodule.__init__',
                                                                                                          'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule._explainer_step': ( 'methods.counternet.html#counternettrainingmodule._explainer_step',
                                                                                                                 'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule._predictor_step': ( 'methods.counternet.html#counternettrainingmodule._predictor_step',
                                                                                                                 'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule._training_step': ( 'methods.counternet.html#counternettrainingmodule._training_step',
                                                                                                                'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule._training_step_logs': ( 'methods.counternet.html#counternettrainingmodule._training_step_logs',
                                                                                                                     'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule.exp_loss_fn': ( 'methods.counternet.html#counternettrainingmodule.exp_loss_fn',
                                                                                                             'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule.forward': ( 'methods.counternet.html#counternettrainingmodule.forward',
                                                                                                         'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule.generate_cfs': ( 'methods.counternet.html#counternettrainingmodule.generate_cfs',
                                                                                                              'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule.init_net_opt': ( 'methods.counternet.html#counternettrainingmodule.init_net_opt',
                                                                                                              'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule.loss_fn_1': ( 'methods.counternet.html#counternettrainingmodule.loss_fn_1',
                                                                                                           'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule.loss_fn_2': ( 'methods.counternet.html#counternettrainingmodule.loss_fn_2',
                                                                                                           'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule.loss_fn_3': ( 'methods.counternet.html#counternettrainingmodule.loss_fn_3',
                                                                                                           'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule.pred_loss_fn': ( 'methods.counternet.html#counternettrainingmodule.pred_loss_fn',
                                                                                                              'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule.predict': ( 'methods.counternet.html#counternettrainingmodule.predict',
                                                                                                         'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule.training_step': ( 'methods.counternet.html#counternettrainingmodule.training_step',
                                                                                                               'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModule.validation_step': ( 'methods.counternet.html#counternettrainingmodule.validation_step',
                                                                                                                 'relax/methods/counternet.py'),
                                          'relax.methods.counternet.CounterNetTrainingModuleConfigs': ( 'methods.counternet.html#counternettrainingmoduleconfigs',
                                                                                                        'relax/methods/counternet.py'),
                                          'relax.methods.counternet.partition_trainable_params': ( 'methods.counternet.html#partition_trainable_params',
                                                                                                   'relax/methods/counternet.py'),
                                          'relax.methods.counternet.project_immutable_features': ( 'methods.counternet.html#project_immutable_features',
                                                                                                   'relax/methods/counternet.py')},
            'relax.methods.diverse': { 'relax.methods.diverse.DiverseCF': ('methods.diverse.html#diversecf', 'relax/methods/diverse.py'),
                                       'relax.methods.diverse.DiverseCF.__init__': ( 'methods.diverse.html#diversecf.__init__',
                                                                                     'relax/methods/diverse.py'),
                                       'relax.methods.diverse.DiverseCF.generate_cf': ( 'methods.diverse.html#diversecf.generate_cf',
                                                                                        'relax/methods/diverse.py'),
                                       'relax.methods.diverse.DiverseCF.generate_cfs': ( 'methods.diverse.html#diversecf.generate_cfs',
                                                                                         'relax/methods/diverse.py'),
                                       'relax.methods.diverse.DiverseCFConfig': ( 'methods.diverse.html#diversecfconfig',
                                                                                  'relax/methods/diverse.py'),
                                       'relax.methods.diverse.DiverseCFConfig.keys': ( 'methods.diverse.html#diversecfconfig.keys',
                                                                                       'relax/methods/diverse.py'),
                                       'relax.methods.diverse._compute_regularization_loss': ( 'methods.diverse.html#_compute_regularization_loss',
                                                                                               'relax/methods/diverse.py'),
                                       'relax.methods.diverse._diverse_cf': ( 'methods.diverse.html#_diverse_cf',
                                                                              'relax/methods/diverse.py'),
                                       'relax.methods.diverse.dpp_style': ('methods.diverse.html#dpp_style', 'relax/methods/diverse.py'),
                                       'relax.methods.diverse.hinge_loss': ('methods.diverse.html#hinge_loss', 'relax/methods/diverse.py'),
                                       'relax.methods.diverse.l1_mean': ('methods.diverse.html#l1_mean', 'relax/methods/diverse.py')},
            'relax.methods.proto': { 'relax.methods.proto.AE': ('methods.prototype.html#ae', 'relax/methods/proto.py'),
                                     'relax.methods.proto.AE.__call__': ('methods.prototype.html#ae.__call__', 'relax/methods/proto.py'),
                                     'relax.methods.proto.AE.__init__': ('methods.prototype.html#ae.__init__', 'relax/methods/proto.py'),
                                     'relax.methods.proto.AEConfigs': ('methods.prototype.html#aeconfigs', 'relax/methods/proto.py'),
                                     'relax.methods.proto.AETrainingModule': ( 'methods.prototype.html#aetrainingmodule',
                                                                               'relax/methods/proto.py'),
                                     'relax.methods.proto.AETrainingModule.__init__': ( 'methods.prototype.html#aetrainingmodule.__init__',
                                                                                        'relax/methods/proto.py'),
                                     'relax.methods.proto.AETrainingModule._training_step': ( 'methods.prototype.html#aetrainingmodule._training_step',
                                                                                              'relax/methods/proto.py'),
                                     'relax.methods.proto.AETrainingModule.encode': ( 'methods.prototype.html#aetrainingmodule.encode',
                                                                                      'relax/methods/proto.py'),
                                     'relax.methods.proto.AETrainingModule.forward': ( 'methods.prototype.html#aetrainingmodule.forward',
                                                                                       'relax/methods/proto.py'),
                                     'relax.methods.proto.AETrainingModule.init_net_opt': ( 'methods.prototype.html#aetrainingmodule.init_net_opt',
                                                                                            'relax/methods/proto.py'),
                                     'relax.methods.proto.AETrainingModule.loss_fn': ( 'methods.prototype.html#aetrainingmodule.loss_fn',
                                                                                       'relax/methods/proto.py'),
                                     'relax.methods.proto.AETrainingModule.training_step': ( 'methods.prototype.html#aetrainingmodule.training_step',
                                                                                             'relax/methods/proto.py'),
                                     'relax.methods.proto.AETrainingModule.validation_step': ( 'methods.prototype.html#aetrainingmodule.validation_step',
                                                                                               'relax/methods/proto.py'),
                                     'relax.methods.proto.ProtoCF': ('methods.prototype.html#protocf', 'relax/methods/proto.py'),
                                     'relax.methods.proto.ProtoCF.__init__': ( 'methods.prototype.html#protocf.__init__',
                                                                               'relax/methods/proto.py'),
                                     'relax.methods.proto.ProtoCF._is_module_trained': ( 'methods.prototype.html#protocf._is_module_trained',
                                                                                         'relax/methods/proto.py'),
                                     'relax.methods.proto.ProtoCF.generate_cf': ( 'methods.prototype.html#protocf.generate_cf',
                                                                                  'relax/methods/proto.py'),
                                     'relax.methods.proto.ProtoCF.generate_cfs': ( 'methods.prototype.html#protocf.generate_cfs',
                                                                                   'relax/methods/proto.py'),
                                     'relax.methods.proto.ProtoCF.train': ( 'methods.prototype.html#protocf.train',
                                                                            'relax/methods/proto.py'),
                                     'relax.methods.proto.ProtoCF.update_cat_info': ( 'methods.prototype.html#protocf.update_cat_info',
                                                                                      'relax/methods/proto.py'),
                                     'relax.methods.proto.ProtoCFConfig': ( 'methods.prototype.html#protocfconfig',
                                                                            'relax/methods/proto.py'),
                                     'relax.methods.proto._proto_cf': ('methods.prototype.html#_proto_cf', 'relax/methods/proto.py')},
            'relax.methods.vanilla': { 'relax.methods.vanilla.VanillaCF': ('methods.vanilla.html#vanillacf', 'relax/methods/vanilla.py'),
                                       'relax.methods.vanilla.VanillaCF.__init__': ( 'methods.vanilla.html#vanillacf.__init__',
                                                                                     'relax/methods/vanilla.py'),
                                       'relax.methods.vanilla.VanillaCF.generate_cf': ( 'methods.vanilla.html#vanillacf.generate_cf',
                                                                                        'relax/methods/vanilla.py'),
                                       'relax.methods.vanilla.VanillaCF.generate_cfs': ( 'methods.vanilla.html#vanillacf.generate_cfs',
                                                                                         'relax/methods/vanilla.py'),
                                       'relax.methods.vanilla.VanillaCFConfig': ( 'methods.vanilla.html#vanillacfconfig',
                                                                                  'relax/methods/vanilla.py'),
                                       'relax.methods.vanilla._vanilla_cf': ( 'methods.vanilla.html#_vanilla_cf',
                                                                              'relax/methods/vanilla.py')},
            'relax.module': { 'relax.module.BaseNetwork': ('training_module.html#basenetwork', 'relax/module.py'),
                              'relax.module.BaseNetwork.__call__': ('training_module.html#basenetwork.__call__', 'relax/module.py'),
                              'relax.module.BaseTrainingModule': ('training_module.html#basetrainingmodule', 'relax/module.py'),
                              'relax.module.BaseTrainingModule.init_logger': ( 'training_module.html#basetrainingmodule.init_logger',
                                                                               'relax/module.py'),
                              'relax.module.BaseTrainingModule.init_net_opt': ( 'training_module.html#basetrainingmodule.init_net_opt',
                                                                                'relax/module.py'),
                              'relax.module.BaseTrainingModule.log': ('training_module.html#basetrainingmodule.log', 'relax/module.py'),
                              'relax.module.BaseTrainingModule.log_dict': ( 'training_module.html#basetrainingmodule.log_dict',
                                                                            'relax/module.py'),
                              'relax.module.BaseTrainingModule.save_hyperparameters': ( 'training_module.html#basetrainingmodule.save_hyperparameters',
                                                                                        'relax/module.py'),
                              'relax.module.BaseTrainingModule.training_step': ( 'training_module.html#basetrainingmodule.training_step',
                                                                                 'relax/module.py'),
                              'relax.module.BaseTrainingModule.validation_step': ( 'training_module.html#basetrainingmodule.validation_step',
                                                                                   'relax/module.py'),
                              'relax.module.DenseBlock': ('training_module.html#denseblock', 'relax/module.py'),
                              'relax.module.DenseBlock.__call__': ('training_module.html#denseblock.__call__', 'relax/module.py'),
                              'relax.module.DenseBlock.__init__': ('training_module.html#denseblock.__init__', 'relax/module.py'),
                              'relax.module.MLP': ('training_module.html#mlp', 'relax/module.py'),
                              'relax.module.MLP.__call__': ('training_module.html#mlp.__call__', 'relax/module.py'),
                              'relax.module.MLP.__init__': ('training_module.html#mlp.__init__', 'relax/module.py'),
                              'relax.module.PredictiveModel': ('training_module.html#predictivemodel', 'relax/module.py'),
                              'relax.module.PredictiveModel.__call__': ('training_module.html#predictivemodel.__call__', 'relax/module.py'),
                              'relax.module.PredictiveModel.__init__': ('training_module.html#predictivemodel.__init__', 'relax/module.py'),
                              'relax.module.PredictiveModelConfigs': ('training_module.html#predictivemodelconfigs', 'relax/module.py'),
                              'relax.module.PredictiveTrainingModule': ('training_module.html#predictivetrainingmodule', 'relax/module.py'),
                              'relax.module.PredictiveTrainingModule.__init__': ( 'training_module.html#predictivetrainingmodule.__init__',
                                                                                  'relax/module.py'),
                              'relax.module.PredictiveTrainingModule._training_step': ( 'training_module.html#predictivetrainingmodule._training_step',
                                                                                        'relax/module.py'),
                              'relax.module.PredictiveTrainingModule.forward': ( 'training_module.html#predictivetrainingmodule.forward',
                                                                                 'relax/module.py'),
                              'relax.module.PredictiveTrainingModule.init_net_opt': ( 'training_module.html#predictivetrainingmodule.init_net_opt',
                                                                                      'relax/module.py'),
                              'relax.module.PredictiveTrainingModule.loss_fn': ( 'training_module.html#predictivetrainingmodule.loss_fn',
                                                                                 'relax/module.py'),
                              'relax.module.PredictiveTrainingModule.training_step': ( 'training_module.html#predictivetrainingmodule.training_step',
                                                                                       'relax/module.py'),
                              'relax.module.PredictiveTrainingModule.validation_step': ( 'training_module.html#predictivetrainingmodule.validation_step',
                                                                                         'relax/module.py'),
                              'relax.module.PredictiveTrainingModuleConfigs': ( 'training_module.html#predictivetrainingmoduleconfigs',
                                                                                'relax/module.py')},
            'relax.trainer': { 'relax.trainer.TrainingConfigs': ('learning.html#trainingconfigs', 'relax/trainer.py'),
                               'relax.trainer.TrainingConfigs.PRNGSequence': ( 'learning.html#trainingconfigs.prngsequence',
                                                                               'relax/trainer.py'),
                               'relax.trainer.train_model': ('learning.html#train_model', 'relax/trainer.py'),
                               'relax.trainer.train_model_with_states': ('learning.html#train_model_with_states', 'relax/trainer.py')},
            'relax.utils': { 'relax.utils.ParserMarkdownRenderer': ('utils.html#parsermarkdownrenderer', 'relax/utils.py'),
                             'relax.utils.ParserMarkdownRenderer.__init__': ( 'utils.html#parsermarkdownrenderer.__init__',
                                                                              'relax/utils.py'),
                             'relax.utils._docment_parser': ('utils.html#_docment_parser', 'relax/utils.py'),
                             'relax.utils.accuracy': ('utils.html#accuracy', 'relax/utils.py'),
                             'relax.utils.add_to_class': ('utils.html#add_to_class', 'relax/utils.py'),
                             'relax.utils.binary_cross_entropy': ('utils.html#binary_cross_entropy', 'relax/utils.py'),
                             'relax.utils.cat_normalize': ('utils.html#cat_normalize', 'relax/utils.py'),
                             'relax.utils.check_cat_info': ('utils.html#check_cat_info', 'relax/utils.py'),
                             'relax.utils.dist': ('utils.html#dist', 'relax/utils.py'),
                             'relax.utils.grad_update': ('utils.html#grad_update', 'relax/utils.py'),
                             'relax.utils.init_net_opt': ('utils.html#init_net_opt', 'relax/utils.py'),
                             'relax.utils.load_json': ('utils.html#load_json', 'relax/utils.py'),
                             'relax.utils.make_model': ('utils.html#make_model', 'relax/utils.py'),
                             'relax.utils.proximity': ('utils.html#proximity', 'relax/utils.py'),
                             'relax.utils.show_doc': ('utils.html#show_doc', 'relax/utils.py'),
                             'relax.utils.sigmoid': ('utils.html#sigmoid', 'relax/utils.py'),
                             'relax.utils.validate_configs': ('utils.html#validate_configs', 'relax/utils.py')}}}
