# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/methods/07_vaecf.ipynb.

# %% ../../nbs/methods/07_vaecf.ipynb 3
from __future__ import annotations
from ..import_essentials import *
from .base import BaseCFModule, BaseParametricCFModule
from ..utils import *
from ..module import MLP, BaseTrainingModule
from ..data import *
from ..trainer import train_model, TrainingConfigs

# %% auto 0
__all__ = []

# %% ../../nbs/methods/07_vaecf.ipynb 4
def hindge_embedding_loss(
    inputs: Array, targets: Array, margin: float = 1.0, 
):
    """Hinge embedding loss. (Reduce mean over batch)"""
    assert targets.shape == (1,)
    if jnp.equal(targets, 1):
        loss = inputs
    elif jnp.equal(targets, -1):
        loss = jax.nn.relu(margin - inputs)
    else:
        raise ValueError(f"targets must be 1 or -1, got {targets}")
    loss = jnp.mean(loss)
    return loss   


# %% ../../nbs/methods/07_vaecf.ipynb 7
class Encoder(hk.Module):
    def __init__(self, sizes: List[int], dropout: float = 0.1):
        super().__init__()
        self.encoder = MLP(
            sizes[:-1], dropout_rate=dropout, name="encoder_mean")
        self.encoded_size = sizes[-1]
    
    def __call__(self, x: Array, is_training: bool):
        mu = self.encoder(x, is_training)
        mu = hk.Linear(self.encoded_size, name='mu')(mu)
        logvar = self.encoder(x, is_training)
        logvar = hk.Linear(self.encoded_size, name='logvar')(logvar) + 0.5
        logvar = jax.nn.sigmoid(logvar) + 0.5
        return mu, logvar

class Decoder(hk.Module):
    def __init__(
        self, 
        sizes: List[int], 
        input_size: int,
        dropout: float = 0.1
    ):
        super().__init__()
        self.decoder = MLP(
            sizes, dropout_rate=dropout, name="Decoder")
        self.input_size = input_size
    
    def __call__(self, z: Array, is_training: bool):
        mu_dec = self.decoder(z, is_training=is_training)
        mu_dec = hk.Linear(self.input_size, name='mu_x')(mu_dec)
        mu_dec = jax.nn.sigmoid(mu_dec)
        return mu_dec

# %% ../../nbs/methods/07_vaecf.ipynb 8
class VAECFModuleConfigs(BaseParser):
    """Configurator of `VAECFModule`."""
    enc_sizes: List[int] = Field(
        [20, 16, 14, 12, 5],
        description="Sequence of Encoder layer sizes."
    )
    dec_sizes: List[int] = Field(
        [12, 14, 16, 20],
        description="Sequence of Decoder layer sizes."
    )
    dropout_rate: float = Field(
        0.1, description="Dropout rate."
    )
    lr: float = Field(
        1e-3, description="Learning rate."
    )
    mu_samples: int = Field(
        50, description="Number of samples for mu."
    )
    validity_reg: float = Field(
        42.0, description="Regularization for validity."
    )

@dataclass
class SampleOut:
    """Output of `VAECFModule.sample`."""
    em: Array
    ev: Array
    mu_x: Array
