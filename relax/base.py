# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_base.ipynb.

# %% auto 0
__all__ = ['BaseConfig', 'BaseModule', 'PredFnMixedin', 'TrainableMixedin']

# %% ../nbs/00_base.ipynb 1
from pydantic import BaseModel as BasePydanticModel
import json
from pathlib import Path


# %% ../nbs/00_base.ipynb 3
class BaseConfig(BasePydanticModel):

    def save(self, path):
        p = Path(path)
        if not str(p).endswith('.json'):
            raise ValueError(f"Path must end with `.json`, but got: {p}")
        if not p.parent.exists():
            p.parent.mkdir(parents=True)
        with open(path, 'w') as f:
            json.dump(self.dict(), f, indent=4)
    
    @classmethod
    def load_from_json(cls, path):
        p = Path(path)
        if not p.exists():
            raise FileNotFoundError(f"File not found: {p}")
        with open(path, 'r') as f:
            return cls(**json.load(f))

# %% ../nbs/00_base.ipynb 5
class BaseModule:
    def __init__(self, config, *, name=None):
        self.config = config
        self._name = name

    @property
    def name(self):
        return self._name or self.__class__.__name__
    
    def save(self, path):
        raise NotImplementedError

    def load_from_path(self, path):
        raise NotImplementedError

# %% ../nbs/00_base.ipynb 7
class PredFnMixedin:
    def pred_fn(self, x):
        raise NotImplementedError

# %% ../nbs/00_base.ipynb 8
class TrainableMixedin:
    @property
    def is_trained(self) -> bool:
        raise NotImplementedError
    
    def train(self, data, **kwargs):
        raise NotImplementedError
