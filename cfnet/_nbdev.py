# AUTOGENERATED BY NBDEV! DO NOT EDIT!

__all__ = ["index", "modules", "custom_doc_links", "git_url"]

index = {"validate_configs": "00_utils.ipynb",
         "load_json": "00_utils.ipynb",
         "add_to_class": "00_utils.ipynb",
         "cat_normalize": "00_utils.ipynb",
         "binary_cross_entropy": "00_utils.ipynb",
         "sigmoid": "00_utils.ipynb",
         "accuracy": "00_utils.ipynb",
         "dist": "00_utils.ipynb",
         "proximity": "00_utils.ipynb",
         "BaseCFExplanationModule": "00a_inferfaces.ipynb",
         "LocalCFExplanationModule": "00a_inferfaces.ipynb",
         "check_cat_info": "00a_inferfaces.ipynb",
         "NumpyDataset": "01_datasets.ipynb",
         "NumpyLoader": "01_datasets.ipynb",
         "find_imutable_idx_list": "01_datasets.ipynb",
         "DataModuleConfigs": "01_datasets.ipynb",
         "TabularDataModule": "01_datasets.ipynb",
         "DenseBlock": "02_nets.ipynb",
         "MLP": "02_nets.ipynb",
         "PredictiveModelConfigs": "02_nets.ipynb",
         "PredictiveModel": "02_nets.ipynb",
         "CounterNetModelConfigs": "02_nets.ipynb",
         "CounterNetModel": "02_nets.ipynb",
         "make_model": "03_training_module.ipynb",
         "init_net_opt": "03_training_module.ipynb",
         "grad_update": "03_training_module.ipynb",
         "BaseTrainingModule": "03_training_module.ipynb",
         "PredictiveTrainingModuleConfigs": "03_training_module.ipynb",
         "PredictiveTrainingModule": "03_training_module.ipynb",
         "partition_trainable_params": "03_training_module.ipynb",
         "CounterNetTrainingModuleConfigs": "03_training_module.ipynb",
         "project_immutable_features": "03_training_module.ipynb",
         "CounterNetTrainingModule": "03_training_module.ipynb",
         "TrainingConfigs": "04_learning.ipynb",
         "train_model_with_states": "04_learning.ipynb",
         "train_model": "04_learning.ipynb",
         "TensorboardLogger": "04a_logger.ipynb",
         "save_checkpoint": "04b_ckpt_manager.ipynb",
         "load_checkpoint": "04b_ckpt_manager.ipynb",
         "CheckpointManager": "04b_ckpt_manager.ipynb",
         "VanillaCFConfig": "05_methods.vanilla.ipynb",
         "VanillaCF": "05_methods.vanilla.ipynb",
         "hinge_loss": "05b_methods.diverse.ipynb",
         "l1_mean": "05b_methods.diverse.ipynb",
         "dpp_style": "05b_methods.diverse.ipynb",
         "DiverseCFConfig": "05b_methods.diverse.ipynb",
         "DiverseCF": "05b_methods.diverse.ipynb",
         "AEConfigs": "05c_methods.prototype.ipynb",
         "AE": "05c_methods.prototype.ipynb",
         "AETrainingModule": "05c_methods.prototype.ipynb",
         "ProtoCFConfig": "05c_methods.prototype.ipynb",
         "ProtoCF": "05c_methods.prototype.ipynb",
         "CFExplanationResults": "06_evaluate.ipynb",
         "generate_cf_results": "06_evaluate.ipynb",
         "generate_cf_results_local_exp": "06_evaluate.ipynb",
         "generate_cf_results_cfnet": "06_evaluate.ipynb",
         "compute_predictive_acc": "06_evaluate.ipynb",
         "compute_validity": "06_evaluate.ipynb",
         "compute_proximity": "06_evaluate.ipynb",
         "compute_sparsity": "06_evaluate.ipynb",
         "compute_manifold_dist": "06_evaluate.ipynb",
         "get_runtime": "06_evaluate.ipynb",
         "compute_so_validity": "06_evaluate.ipynb",
         "compute_so_proximity": "06_evaluate.ipynb",
         "compute_so_sparsity": "06_evaluate.ipynb",
         "metrics2fn": "06_evaluate.ipynb",
         "evaluate_cfs": "06_evaluate.ipynb",
         "DEFAULT_METRICS": "06_evaluate.ipynb",
         "benchmark_cfs": "06_evaluate.ipynb"}

modules = ["utils.py",
           "interfaces.py",
           "datasets.py",
           "nets.py",
           "training_module.py",
           "train.py",
           "logger.py",
           "_ckpt_manager.py",
           "methods/vanilla.py",
           "methods/diverse.py",
           "methods/proto.py",
           "evaluate.py"]

doc_url = "https://birkhoffg.github.io/cfnet/"

git_url = "https://github.com/birkhoffg/cfnet/tree/master/"

def custom_doc_links(name): return None
