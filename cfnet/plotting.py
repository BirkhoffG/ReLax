# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/07_plotting.ipynb.

# %% ../nbs/07_plotting.ipynb 3
from __future__ import annotations
from .import_essentials import *
import seaborn as sns
import matplotlib.pyplot as plt
from .evaluate import Explanation
from .datasets import TabularDataModule

# %% auto 0
__all__ = ['swarmplot']

# %% ../nbs/07_plotting.ipynb 5
def swarmplot(
        cf_exp: Explanation, # CF Explanations
        plot_name: str = "Swarm Plot",  # The name for the plot
        sample_num: int = 100,  # The number of sample for the plot
        seed: int = 42,  # Seed for PRG for random sampling
        separate_class: bool = True, # Whether to separate the data based on the classifier result
    ):
    """Print a swarm plot of the difference of continuous data between factual and counter factual data. """
    X = cf_exp.X
    cfs = cf_exp.cfs
    dm = cf_exp.data_module
    pred_fn = cf_exp.pred_fn

    # Compute the difference of continuous data between factual and counterfactual
    X_inverse = dm.normalizer.inverse_transform(X[:, :dm.cat_idx])
    cf_inverse = dm.normalizer.inverse_transform(cfs[:, :dm.cat_idx])
    diff = jnp.subtract(cf_inverse, X_inverse)

    # Configuration for randomized sampling
    data_len: int = len(X)  # Length of the dataset
    key_seq: hk.PRNGSequence = hk.PRNGSequence(
        seed
    )  # Random number sequence
    key_seq.reserve(
        sample_num
    )  # Generate some random number as key based on the number of batches
    indices: jnp.array = jnp.arange(
        data_len
    )  # Available indices in the dataset
    y_pred = pred_fn(X).reshape(-1, 1)
    y_pred = y_pred.reshape(-1)
    y_pred = np.rint(y_pred)
    if 1 in y_pred:
        one_indices = jnp.array([i for i, x in enumerate(y_pred) if x == 1])
    if 0 in y_pred:
        zero_indices = jnp.array([i for i, x in enumerate(y_pred) if x == 0])

    # Preparing the data for plotting
    key = next(key_seq) # Obtain a random key from the sequence
    indices = jax.random.permutation(key, indices)  # Shuffled available indices
    if not separate_class:
        sampled_data = jnp.asarray([diff[i] for i in indices[: sample_num]]) # sampled data
        data = dict()  # Data for the plot
        for f in range(len(dm.continous_cols)):
            data[dm.continous_cols[f]] = sampled_data[:,f]
        df = pd.DataFrame(data)

        # Create the plot
        sns.set(style="whitegrid")
        ax = sns.swarmplot(
                x="variable",
                y="value",
                data=df.melt(),
                alpha=0.5,
                size=5).set(title=plot_name, xlabel='Features', ylabel='Difference')
        plt.show(ax)
    else:
        if 1 in y_pred:
            one_indices = jax.random.permutation(key, one_indices) # Shuffle available indices
            sampled_data_one = jnp.asarray(diff[one_indices[: sample_num]]) # sampled data
            data_one = dict()  # Data for the plot
        if 0 in y_pred:
            zero_indices = jax.random.permutation(key, zero_indices) # Shuffle available indices
            sampled_data_zero = jnp.asarray(diff[zero_indices[: sample_num]]) # sampled data
            data_zero = dict()  # Data for the plot

        for f in range(len(dm.continous_cols)):
            if 0 in y_pred:
                data_zero[dm.continous_cols[f]] = sampled_data_zero[:,f]
            if 1 in y_pred:
                data_one[dm.continous_cols[f]] = sampled_data_one[:,f]
        if 1 in y_pred:
            df_one = pd.DataFrame(data_one)
        if 0 in y_pred:
            df_zero = pd.DataFrame(data_zero)

        # Create the plot
        sns.set(style="whitegrid")
        fig, axes = plt.subplots(1, 2, figsize=(18, 10))
        if 0 in y_pred:
            sns.swarmplot(
                    x="variable",
                    y="value",
                    data=df_zero.melt(),
                    alpha=0.5,
                    size=5,
                    ax=axes[0]).set(title=plot_name+" Zero to One", xlabel='Features', ylabel='Difference')
        if 1 in y_pred:
            sns.swarmplot(
                    x="variable",
                    y="value",
                    data=df_one.melt(),
                    alpha=0.5,
                    size=5,
                    ax=axes[1]).set(title=plot_name+" One to Zero", xlabel='Features', ylabel='Difference')
        plt.show(fig)
